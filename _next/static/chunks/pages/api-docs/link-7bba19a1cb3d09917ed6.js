_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[105],{HhPP:function(n,e,s){var o={"./link.md":"e0Sa"};function a(n){var e=p(n);return s(e)}function p(n){if(!s.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}a.keys=function(){return Object.keys(o)},a.resolve=p,n.exports=a,a.id="HhPP"},bVqx:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api-docs/link",function(){return s("wSo8")}])},e0Sa:function(n,e){n.exports='---\nfilename: /packages/material-ui/src/Link/Link.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# Link API\n\n<p class="description">The API documentation of the Link React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport Link from \'@material-ui/core/Link\';\n// or\nimport { Link } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\n\n\n\n## Component name\n\nThe `MuiLink` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | The content of the link. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">color</span> | <span class="prop-type">\'error\'<br>&#124;&nbsp;\'inherit\'<br>&#124;&nbsp;\'initial\'<br>&#124;&nbsp;\'primary\'<br>&#124;&nbsp;\'secondary\'<br>&#124;&nbsp;\'textPrimary\'<br>&#124;&nbsp;\'textSecondary\'</span> | <span class="prop-default">\'primary\'</span> | The color of the link. |\n| <span class="prop-name">component</span> | <span class="prop-type">element type</span> | <span class="prop-default">\'a\'</span> | The component used for the root node. Either a string to use a HTML element or a component.<br>\u26a0\ufe0f [Needs to be able to hold a ref](/guides/composition/#caveat-with-refs). |\n| <span class="prop-name">TypographyClasses</span> | <span class="prop-type">object</span> |  | `classes` prop applied to the [`Typography`](/api/typography/) element. |\n| <span class="prop-name">underline</span> | <span class="prop-type">\'always\'<br>&#124;&nbsp;\'hover\'<br>&#124;&nbsp;\'none\'</span> | <span class="prop-default">\'hover\'</span> | Controls when the link should have an underline. |\n| <span class="prop-name">variant</span> | <span class="prop-type">\'body1\'<br>&#124;&nbsp;\'body2\'<br>&#124;&nbsp;\'button\'<br>&#124;&nbsp;\'caption\'<br>&#124;&nbsp;\'h1\'<br>&#124;&nbsp;\'h2\'<br>&#124;&nbsp;\'h3\'<br>&#124;&nbsp;\'h4\'<br>&#124;&nbsp;\'h5\'<br>&#124;&nbsp;\'h6\'<br>&#124;&nbsp;\'inherit\'<br>&#124;&nbsp;\'overline\'<br>&#124;&nbsp;\'subtitle1\'<br>&#124;&nbsp;\'subtitle2\'<br>&#124;&nbsp;string</span> | <span class="prop-default">\'inherit\'</span> | Applies the theme typography styles. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element ([Typography](/api/typography/)).\n\n## CSS\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">.MuiLink-root</span> | Styles applied to the root element.\n| <span class="prop-name">underlineNone</span> | <span class="prop-name">.MuiLink-underlineNone</span> | Styles applied to the root element if `underline="none"`.\n| <span class="prop-name">underlineHover</span> | <span class="prop-name">.MuiLink-underlineHover</span> | Styles applied to the root element if `underline="hover"`.\n| <span class="prop-name">underlineAlways</span> | <span class="prop-name">.MuiLink-underlineAlways</span> | Styles applied to the root element if `underline="always"`.\n| <span class="prop-name">button</span> | <span class="prop-name">.MuiLink-button</span> | Styles applied to the root element if `component="button"`.\n| <span class="prop-name">focusVisible</span> | <span class="prop-name">.Mui-focusVisible</span> | Pseudo-class applied to the root element if the link is keyboard focused.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/next/packages/material-ui/src/Link/Link.js) for more detail.\n\n## Inheritance\n\nThe props of the [Typography](/api/typography/) component are also available.\nYou can take advantage of this behavior to [target nested components](/guides/api/#spread).\n\n## Demos\n\n- [Breadcrumbs](/components/breadcrumbs/)\n- [Links](/components/links/)\n\n'},wSo8:function(n,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return l}));var o=s("mXGw"),a=s.n(o),p=s("e+1t"),t=s("kVtE"),r=a.a.createElement,i=s("HhPP");function l(n){var e=n.docs;return r(p.a,{docs:e})}l.getInitialProps=function(){var n=Object(t.a)({pageFilename:"api/link",requireRaw:i});return{demos:n.demos,docs:n.docs}}}},[["bVqx",0,2,1,3,5,4,6,7,8,9,10,11,12,13,15,16,14,17,18,19]]]);