_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[165],{"82oe":function(a,n,e){"use strict";e.r(n),e.d(n,"default",(function(){return i}));var s=e("mXGw"),t=e.n(s),o=e("e+1t"),p=e("kVtE"),l=t.a.createElement,r=e("TpEO");function i(a){var n=a.docs;return l(o.a,{docs:n})}i.getInitialProps=function(){var a=Object(p.a)({pageFilename:"api/tabs",requireRaw:r});return{demos:a.demos,docs:a.docs}}},Jkky:function(a,n){a.exports='---\nfilename: /packages/material-ui/src/Tabs/Tabs.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# Tabs API\n\n<p class="description">The API documentation of the Tabs React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport Tabs from \'@material-ui/core/Tabs\';\n// or\nimport { Tabs } from \'@material-ui/core\';\n```\n\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\n\n\n\n## Component name\n\nThe `MuiTabs` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">action</span> | <span class="prop-type">ref</span> |  | Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It supports two actions: `updateIndicator()` and `updateScrollButtons()` |\n| <span class="prop-name">aria-label</span> | <span class="prop-type">string</span> |  | The label for the Tabs as a string. |\n| <span class="prop-name">aria-labelledby</span> | <span class="prop-type">string</span> |  | An id or list of ids separated by a space that label the Tabs. |\n| <span class="prop-name">centered</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the tabs will be centered. This prop is intended for large views. |\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | The content of the component. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">component</span> | <span class="prop-type">elementType</span> | <span class="prop-default">\'div\'</span> | The component used for the root node. Either a string to use a HTML element or a component. |\n| <span class="prop-name">indicatorColor</span> | <span class="prop-type">\'primary\'<br>&#124;&nbsp;\'secondary\'</span> | <span class="prop-default">\'secondary\'</span> | Determines the color of the indicator. |\n| <span class="prop-name">onChange</span> | <span class="prop-type">func</span> |  | Callback fired when the value changes.<br><br>**Signature:**<br>`function(event: object, value: any) => void`<br>*event:* The event source of the callback. **Warning**: This is a generic event not a change event.<br>*value:* We default to the index of the child (number) |\n| <span class="prop-name">orientation</span> | <span class="prop-type">\'horizontal\'<br>&#124;&nbsp;\'vertical\'</span> | <span class="prop-default">\'horizontal\'</span> | The tabs orientation (layout flow direction). |\n| <span class="prop-name">ScrollButtonComponent</span> | <span class="prop-type">elementType</span> | <span class="prop-default">TabScrollButton</span> | The component used to render the scroll buttons. |\n| <span class="prop-name">scrollButtons</span> | <span class="prop-type">\'auto\'<br>&#124;&nbsp;\'desktop\'<br>&#124;&nbsp;\'off\'<br>&#124;&nbsp;\'on\'</span> | <span class="prop-default">\'auto\'</span> | Determine behavior of scroll buttons when tabs are set to scroll:<br>- `auto` will only present them when not all the items are visible. - `desktop` will only present them on medium and larger viewports. - `on` will always present them. - `off` will never present them. |\n| <span class="prop-name">selectionFollowsFocus</span> | <span class="prop-type">bool</span> |  | If `true` the selected tab changes on focus. Otherwise it only changes on activation. |\n| <span class="prop-name">TabIndicatorProps</span> | <span class="prop-type">object</span> | <span class="prop-default">{}</span> | Props applied to the tab indicator element. |\n| <span class="prop-name">TabScrollButtonProps</span> | <span class="prop-type">object</span> |  | Props applied to the [`TabScrollButton`](/api/tab-scroll-button/) element. |\n| <span class="prop-name">textColor</span> | <span class="prop-type">\'inherit\'<br>&#124;&nbsp;\'primary\'<br>&#124;&nbsp;\'secondary\'</span> | <span class="prop-default">\'inherit\'</span> | Determines the color of the `Tab`. |\n| <span class="prop-name">value</span> | <span class="prop-type">any</span> |  | The value of the currently selected `Tab`. If you don\'t want any selected `Tab`, you can set this prop to `false`. |\n| <span class="prop-name">variant</span> | <span class="prop-type">\'fullWidth\'<br>&#124;&nbsp;\'scrollable\'<br>&#124;&nbsp;\'standard\'</span> | <span class="prop-default">\'standard\'</span> | Determines additional display behavior of the tabs:<br> - `scrollable` will invoke scrolling properties and allow for horizontally  scrolling (or swiping) of the tab bar.  -`fullWidth` will make the tabs grow to use all the available space,  which should be used for small views, like on mobile.  - `standard` will render the default state. |\n| <span class="prop-name">visibleScrollbar</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the scrollbar will be visible. It can be useful when displaying a long vertical list of tabs. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element (native element).\n\n## CSS\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">.MuiTabs-root</span> | Styles applied to the root element.\n| <span class="prop-name">vertical</span> | <span class="prop-name">.MuiTabs-vertical</span> | Styles applied to the root element if `orientation="vertical"`.\n| <span class="prop-name">flexContainer</span> | <span class="prop-name">.MuiTabs-flexContainer</span> | Styles applied to the flex container element.\n| <span class="prop-name">flexContainerVertical</span> | <span class="prop-name">.MuiTabs-flexContainerVertical</span> | Styles applied to the flex container element if `orientation="vertical"`.\n| <span class="prop-name">centered</span> | <span class="prop-name">.MuiTabs-centered</span> | Styles applied to the flex container element if `centered={true}` & `!variant="scrollable"`.\n| <span class="prop-name">scroller</span> | <span class="prop-name">.MuiTabs-scroller</span> | Styles applied to the tablist element.\n| <span class="prop-name">fixed</span> | <span class="prop-name">.MuiTabs-fixed</span> | Styles applied to the tablist element if `!variant="scrollable"`\b\b\b.\n| <span class="prop-name">scrollableX</span> | <span class="prop-name">.MuiTabs-scrollableX</span> | Styles applied to the tablist element if `variant="scrollable"` and `orientation="horizontal"`.\n| <span class="prop-name">scrollableY</span> | <span class="prop-name">.MuiTabs-scrollableY</span> | Styles applied to the tablist element if `variant="scrollable"` and `orientation="vertical"`.\n| <span class="prop-name">hideScrollbar</span> | <span class="prop-name">.MuiTabs-hideScrollbar</span> | Styles applied to the tablist element if `variant="scrollable"` and `visibleScrollbar={false}`.\n| <span class="prop-name">scrollButtons</span> | <span class="prop-name">.MuiTabs-scrollButtons</span> | Styles applied to the `ScrollButtonComponent` component.\n| <span class="prop-name">scrollButtonsDesktop</span> | <span class="prop-name">.MuiTabs-scrollButtonsDesktop</span> | Styles applied to the `ScrollButtonComponent` component if `scrollButtons="auto"` or scrollButtons="desktop"`.\n| <span class="prop-name">indicator</span> | <span class="prop-name">.MuiTabs-indicator</span> | Styles applied to the `TabIndicator` component.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/next/packages/material-ui/src/Tabs/Tabs.js) for more detail.\n\n## Demos\n\n- [Tabs](/components/tabs/)\n\n'},TpEO:function(a,n,e){var s={"./tabs.md":"Jkky"};function t(a){var n=o(a);return e(n)}function o(a){if(!e.o(s,a)){var n=new Error("Cannot find module '"+a+"'");throw n.code="MODULE_NOT_FOUND",n}return s[a]}t.keys=function(){return Object.keys(s)},t.resolve=o,a.exports=t,t.id="TpEO"},pziA:function(a,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api-docs/tabs",function(){return e("82oe")}])}},[["pziA",0,2,1,3,5,4,6,7,8,9,10,11,12,13,15,16,14,17,18,19]]]);