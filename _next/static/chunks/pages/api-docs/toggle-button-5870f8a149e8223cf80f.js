_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[175],{"3PrW":function(e,n,t){var s={"./toggle-button.md":"wOMi"};function a(e){var n=o(e);return t(n)}function o(e){if(!t.o(s,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s[e]}a.keys=function(){return Object.keys(s)},a.resolve=o,e.exports=a,a.id="3PrW"},KzNV:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return r}));var s=t("mXGw"),a=t.n(s),o=t("e+1t"),p=t("kVtE"),l=a.a.createElement,i=t("3PrW");function r(e){var n=e.docs;return l(o.a,{docs:n})}r.getInitialProps=function(){var e=Object(p.a)({pageFilename:"api/toggle-button",requireRaw:i});return{demos:e.demos,docs:e.docs}}},MfsF:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/api-docs/toggle-button",function(){return t("KzNV")}])},wOMi:function(e,n){e.exports='---\nfilename: /packages/material-ui-lab/src/ToggleButton/ToggleButton.js\n---\n\n\x3c!--- This documentation is automatically generated, do not try to edit it. --\x3e\n\n# ToggleButton API\n\n<p class="description">The API documentation of the ToggleButton React component. Learn more about the props and the CSS customization points.</p>\n\n## Import\n\n```js\nimport ToggleButton from \'@material-ui/lab/ToggleButton\';\n// or\nimport { ToggleButton } from \'@material-ui/lab\';\n```\n\nYou can learn more about the difference by [reading this guide](/guides/minimizing-bundle-size/).\n\n\n\n## Component name\n\nThe `MuiToggleButton` name can be used for providing [default props](/customization/globals/#default-props) or [style overrides](/customization/globals/#css) at the theme level.\n\n## Props\n\n| Name | Type | Default | Description |\n|:-----|:-----|:--------|:------------|\n| <span class="prop-name">children</span> | <span class="prop-type">node</span> |  | The content of the button. |\n| <span class="prop-name">classes</span> | <span class="prop-type">object</span> |  | Override or extend the styles applied to the component. See [CSS API](#css) below for more details. |\n| <span class="prop-name">disabled</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the button will be disabled. |\n| <span class="prop-name">disableFocusRipple</span> | <span class="prop-type">bool</span> | <span class="prop-default">false</span> | If `true`, the  keyboard focus ripple will be disabled. |\n| <span class="prop-name">disableRipple</span> | <span class="prop-type">bool</span> |  | If `true`, the ripple effect will be disabled.<br>\u26a0\ufe0f Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the `focusVisibleClassName`. |\n| <span class="prop-name">selected</span> | <span class="prop-type">bool</span> |  | If `true`, the button will be rendered in an active state. |\n| <span class="prop-name">size</span> | <span class="prop-type">\'large\'<br>&#124;&nbsp;\'medium\'<br>&#124;&nbsp;\'small\'</span> | <span class="prop-default">\'medium\'</span> | The size of the button. The prop defaults to the value injected by the parent ToggleButtonGroup component. |\n| <span class="prop-name required">value<abbr title="required">*</abbr></span> | <span class="prop-type">any</span> |  | The value to associate with the button when selected in a ToggleButtonGroup. |\n\nThe `ref` is forwarded to the root element.\n\nAny other props supplied will be provided to the root element ([ButtonBase](/api/button-base/)).\n\n## CSS\n\n| Rule name | Global class | Description |\n|:-----|:-------------|:------------|\n| <span class="prop-name">root</span> | <span class="prop-name">.MuiToggleButton-root</span> | Styles applied to the root element.\n| <span class="prop-name">disabled</span> | <span class="prop-name">.Mui-disabled</span> | Pseudo-class applied to the root element if `disabled={true}`.\n| <span class="prop-name">selected</span> | <span class="prop-name">.Mui-selected</span> | Pseudo-class applied to the root element if `selected={true}`.\n| <span class="prop-name">label</span> | <span class="prop-name">.MuiToggleButton-label</span> | Styles applied to the `label` wrapper element.\n| <span class="prop-name">sizeSmall</span> | <span class="prop-name">.MuiToggleButton-sizeSmall</span> | Styles applied to the root element if `size="small"`.\n| <span class="prop-name">sizeLarge</span> | <span class="prop-name">.MuiToggleButton-sizeLarge</span> | Styles applied to the root element if `size="large"`.\n\nYou can override the style of the component thanks to one of these customization points:\n\n- With a rule name of the [`classes` object prop](/customization/components/#overriding-styles-with-classes).\n- With a [global class name](/customization/components/#overriding-styles-with-global-class-names).\n- With a theme and an [`overrides` property](/customization/globals/#css).\n\nIf that\'s not sufficient, you can check the [implementation of the component](https://github.com/mui-org/material-ui/blob/next/packages/material-ui-lab/src/ToggleButton/ToggleButton.js) for more detail.\n\n## Inheritance\n\nThe props of the [ButtonBase](/api/button-base/) component are also available.\nYou can take advantage of this behavior to [target nested components](/guides/api/#spread).\n\n## Demos\n\n- [Toggle Button](/components/toggle-button/)\n\n'}},[["MfsF",0,2,1,3,5,4,6,7,8,9,10,11,12,13,15,16,14,17,18,19]]]);